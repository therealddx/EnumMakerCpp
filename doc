Doc, EnumMaker.

Document Map:
  Theoretical Basis.
  Intended Process Flow.
  Class Description - EnumMakerFactory.
  Class Description - EnumCpp.
  Class Description - EnumEntryCpp.

**

Theoretical Basis.
Enums are full of options. Often, combinations of options.
For example, we may have options represented as such:

enum Setting
{
  S_SETTING1,
  S_SETTING2,
  S_SETTING3,
};

enum Option
{
  O_OPTION1,
  O_OPTION2,
};

Where the selected option value from either set lies within a different namespace.

We may also have options represented as a flattened arrangement in the above, for example:

enum SettingOption
{
  SO_SETTING1_OPTION1,
  SO_SETTING1_OPTION2,
  SO_SETTING2_OPTION1,
  SO_SETTING2_OPTION2,
  SO_SETTING3_OPTION1,
  SO_SETTING3_OPTION2,
};

Often, the flattened representation is most useful for providing one consolidated, unique value for a combination of options. This flattened notation is likely to be the most useful representation in software developments where no room has been made to define a consolidated, non-primitive object for applying some configuration or sending a message. If a server process has been designed only such that it can accept a primitive data type, then the flattened enumeration packs more information into a single data transaction.

At the same time, it is often important to understand what the individual coordinates correspond to. Maintaining separated coordinates is valuable, because it corresponds to the unpacking of data from the flattened enumeration to a the specific value of that one coordinate. 

As such, it becomes important to cleanly manage the transition between the flattened enumeration (composite of all coordinates), and the separate enumerations (individual values for each coordinate), when handling data pertaining to these enums.

**

Intended Process Flow.

Make the keydata.
Using an EnumCppFactory:
  Make EnumEntryCpp's. (mapping option-types to possible values).
  Make EnumCpp. (composed of EnumEntryCpp's).
Make EnumMapperCpp. (provide switch/case mapping service b/w EnumCpp's).
  Use SwitchCaseCpp's.

**

Class Description - EnumMakerFactory.
__init__:
This class has no data; it is solely a bank of functions for creating instances of EnumEntryCpp and EnumCpp.
Thus, this function does nothing.

CreateEnum:
Calls CreateEnumEntrys, followed by a call to EnumCpp.__init__.
  
CreateEnumEntrys:
Calls CreateDicts, followed by looped calls to EnumEntryCpp.__init__.

CreateDicts:
Creates constituent Dictionary's for EnumEntryCpp's. Key-value mapping for said Dictionary's is, technically, a tree. Each coordinate to an enumeration entry only, in a practical scenario, has so many values that are applicable to it. For simplicity's sake, that tree is provided by a list of named lists. By iterating through the named lists, this function collates and expands the content of the named lists (many lists) into constituent Dictionary's (many enum entry objects).

**

Class Description - EnumCpp.
Aggregates references to EnumEntryCpp's.

__init__:
Assigns arguments to member variables.
If any EnumEntryCpp's in the argument list don't match this class's namespace, they are ignored.
This is a trivial argument-protection feature.

ToString:
Prints deserialized representation of C++ enumeration.
This includes the surrounding data (enum MyEnumName { ... }; ).
Able to access members of aggreagted EnumEntryCpp's.

**

Class Description - EnumEntryCpp.
Represents one line-item from a C++ enumeration ("enum").

__init__:
Trivial constructor. Assigns arguments to members.

ToString:
Serializes the constituent Dictionary.
String representation is:
<short-namespace>_<dict-key-1><dict-value-1>_<dict-key-2><dict-value-2>_<dict-key-N><dict-value-N>

 __<short-namespace>
|   __<dict-key-1>
|  |       __<dict-value-1>
|  |      |
v  v      v (... so on)
SO_SETTING1_OPTION2_TWEAK5

Each KVP (key-value-pair) in the constituent Dictionary maps:
  A name for each coordinate (KVP key)
  to a value for that coordinate (KVP value)

e.g., in the following enumeration entry:
SETTING1_OPTION5_TWEAK2
The constituent Dictionary is:
{ "SETTING" : "1", "OPTION" : "5", "TWEAK" : "2" }
This way, the constituent Dictionary holds a deserialized, easily-accessible representation of the enum entry.


